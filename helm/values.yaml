global:
  # -- Global cloud provider configuration. 
  cloudProvider: {}
  # -- Configuration for distributed tracing. 
  tracing: {}
  # -- Configuration for metrics collection.
  metrics: {}
  # -- Global environment setting.
  environment: ""
  ingress:
    # -- Domain name for the ingress.
    domain: ''

# -- Enable or disable the deployment of this chart
enabled: true
# -- Specify the environment for this deployment 
environment: development
# -- Number of replicas to deploy
replicaCount: 1
# -- Initial delay in seconds before the readiness probe starts
initialDelaySeconds: 60
# -- If true, triggers a rolling update when the configuration changes
resetOnConfigChange: true
# -- Image pull policy for all containers in the deployment
imagePullPolicy: Always

# -- String to partially override fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override fullname template
fullnameOverride: ""

# -- Specify the cloud provider where the chart is being deployed
cloudProvider:
  # -- URL of the Docker registry to pull images from
  dockerRegistryUrl: my-registry-url
  # -- Name of the Kubernetes secret containing the image pull credentials
  imagePullSecretName: imagepullsecret
  # -- Specify the flavor of the deployment 
  flavor: openshift

# -- Name of the Kubernetes secret containing the CA certificate
caSecretName: ''
# -- Path where the CA certificate will be mounted in the container
caPath: '/usr/local/share/ca-certificates'
# -- Key in the CA secret that contains the certificate data
caKey: 'ca.crt'

image:
  # -- Docker image name
  repository: nginx
  # -- Docker image tag
  tag: 'latest' 
# -- Port on which the application will listen
port: 8080
# -- Internal ClusterIP service port
internalServicePort: 80
# -- Port to which the service will forward traffic
targetPort: 8080
# -- Port on which the site status will be available
siteStatusPort: 8081
# -- Port to expose on each node for NodePort service type
nodePort: 30001
resources:
  # -- Use custom resources
  enabled: true
  value:
    limits:
      # -- Pod CPU limit
      cpu: 100m
      # -- Pod memory limit
      memory: 128Mi
    requests:
      # -- Pod CPU request
      cpu: 100m
      # --Pod memory request
      memory: 128Mi

# -- Use this property in order to add custom annotations to the Pod
additionalPodAnnotations: {}

# Add extra volumes to the Deployment, for example
# - name: nginx-config
#   configMap:
#    name: 'nginx-extra-configmap'
#
# -- List of extra volumes that are added to the Deployment
extraVolumes: []

# Add extra volumeMounts to the Pod, for example
# - name: nginx-config
#   mountPath: "/etc/nginx/conf.d/default.conf"
#   subPath: default.conf
#
# -- List of extra volumeMounts that are added to the NGINX container
extraVolumeMounts: []

# Add side car to the Deployment, for example
# sidecars: |-
#   - name: envoy
#     image: "{{ .Values.envoy.image }}:{{ .Values.envoy.imageTag }}"
#     volumeMounts: []
#     args: []
#     ports: []
#     resources:
#     {{- toYaml .Values.envoy.resources.value | nindent 12 }}
#
# -- String consists of a list of sidecars containers that are added to the Deployment
sidecars: ''

env:
  opentelemetry:
    # -- OpenTelemetry service name to be associated your NGINX application
    serviceName: nginx
    # -- OpenTelemetry Collector endpoint address
    exporterEndpoint: localhost:4317
    # -- OpenTelemetry sampling method
    samplerMethod: "AlwaysOff" # AlwaysOn, AlwaysOff, TraceIdRatioBased
    # -- OpenTelemetry sampling ratio
    ratio: 0.1 # between 0 and 1
    # -- Use OpenTelemetry parnet-based sampling
    parentBased: "false" # true, false

prometheusExporter:
    # -- Enable or disable the Prometheus exporter sidecar
  enabled: false
  image:
    # -- Docker image name for the Prometheus exporter
    repository: nginx/nginx-prometheus-exporter
    # -- Docker image tag for the Prometheus exporter
    tag: latest
    # -- Image pull policy for the Prometheus exporter
    pullPolicy: IfNotPresent
  resources:
    # -- Enable or disable resource limits and requests
    enabled: true
    value:
      limits:
        # -- CPU limit for the main container
        cpu: 100m
        # -- Memory limit for the main container
        memory: 128Mi
      requests:
        # -- CPU request for the main container
        cpu: 100m
        # -- Memory request for the main container
        memory: 128Mi  

authorization:
  # -- Use authroization mechanism
  enabled: true
  # -- Your authorization domain
  domain: 'example'
  # -- Authorization endpoint
  url: 'http://localhost:8181/v1/data/http/authz/decision'

route:
  # -- Expose NGINX as an Openshift route
  enabled: true
  routesMapping: 
    # -- Path of route
    - path: /
    # -- Host of route
      host: 
  timeout:
    # -- Use custom timeout duration of the route
    enabled: false # defaults to 30s by openshift
    # -- Set the timeout duration of the route. Defaults to 30s by Openshift
    duration: 60s # supported units (us, ms, s, m, h, d)
  # -- Rewrite route target
  rewriteTarget: ''
  tls:
    # -- Use route over HTTPS
    enabled: true
    # -- Set the termination of the route
    termination: edge
    # -- Policy for traffic on insecure schemes like HTTP
    insecureEdgeTerminationPolicy: Redirect
    # -- Use custom certificates for the route
    useCerts: false
    # -- Set the certificate of the route
    certificate: ''
    # -- Set the key of the route
    key: ''
    # -- Set the CA certificate of the route
    caCertificate: ''

ingress:
  # -- Expose NGINX as an Ingress
  enabled: false
  # -- Path of ingress
  path: /
  # -- Host of ingress
  host: ''
  # -- Domain of ingress
  domain: ''
  tls: 
    # -- Use ingress over HTTPS
    enabled: true
    # -- Secret name of ingress that points to the relevant custom certificates
    secretName: ''
